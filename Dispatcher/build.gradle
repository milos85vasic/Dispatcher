buildscript {
    ext.kotlin_version = '1.0.6'
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies.classpath "com.android.tools.build:gradle:2.1.0"
    dependencies.classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    dependencies.classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

apply plugin: "kotlin"
apply plugin: "java"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    compile "junit:junit:4.12"
    testCompile "junit:junit:4.12"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    compile files("libs/Logger_V1.1.2.jar")
}

sourceSets.main.kotlin.srcDirs += 'src/main/kotlin'
sourceSets.main.kotlin.srcDirs += 'build/generated-src/kotlin'

int alpha = 7
int versionNumber = 1
int secondaryVersion = 0
int tertiaryVersion = 0
version = String.format("%d.%d.%d", versionNumber, secondaryVersion, tertiaryVersion)
if (alpha > 0) {
    version += "_Alpha_" + alpha
}
jar.archiveName = "Dispatcher_V" + version + ".jar"

task generateSources {
    final destination = new File(
            "${System.getProperty("user.dir")}${File.separator}Dispatcher${File.separator}build${File.separator}generated-src${File.separator}kotlin${File.separator}net${File.separator}milosvasic${File.separator}dispatcher"
    )
    println("We are about to generate sources [ ${destination.absolutePath} ]")
    if (destination.exists() || destination.mkdirs()) {
        final classFile = new File(
                "$destination${File.separator}DispatcherVersion.kt"
        )
        classFile.write("package net.milosvasic.dispatcher data class DispatcherVersion(val VERSION : String = \"$version\")")
        println("We generated file [ ${classFile.absolutePath} ]")
    } else {
        println("Couldn't initialize [ ${destination.absolutePath} ]")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    archiveName = "Dispatcher_V" + version + "_Sources.jar"
}

artifacts {
    archives sourcesJar
}
